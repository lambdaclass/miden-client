//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "accounts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub code_root: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub storage_root: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))")]
    pub vault_root: Vec<u8>,
    pub nonce: i64,
    pub committed: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account_code::Entity",
        from = "Column::CodeRoot",
        to = "super::account_code::Column::Root",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AccountCode,
    #[sea_orm(has_many = "super::account_keys::Entity")]
    AccountKeys,
    #[sea_orm(
        belongs_to = "super::account_storage::Entity",
        from = "Column::StorageRoot",
        to = "super::account_storage::Column::Root",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AccountStorage,
    #[sea_orm(
        belongs_to = "super::account_vaults::Entity",
        from = "Column::VaultRoot",
        to = "super::account_vaults::Column::Root",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    AccountVaults,
}

impl Related<super::account_code::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AccountCode.def()
    }
}

impl Related<super::account_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AccountKeys.def()
    }
}

impl Related<super::account_storage::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AccountStorage.def()
    }
}

impl Related<super::account_vaults::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AccountVaults.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
